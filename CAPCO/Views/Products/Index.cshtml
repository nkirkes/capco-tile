@model IPagedList<CAPCO.Infrastructure.Domain.Product>
@using CAPCO.Infrastructure.Domain
@using PagedList.Mvc;
@using PagedList;

@{
    ViewBag.Title = "Products";
    //var currentUser = MembershipHelpers.GetCurrentUser();
    var currentUser = ViewBag.CurrentUser as CAPCO.Infrastructure.Domain.ApplicationUser;
    var isPricingEnabled = ViewBag.IsPricingEnabled;
    var filters = (Dictionary<string, string>)ViewBag.Filters;
}



<div class="span-6">
    <div class="section-left">
        @Html.Partial("_LogOnOrRegister")
    </div>

    <div class="section-left">
        <h3 class="sidebar">Quick Search</h3>
        @using (Html.BeginForm("index", "products", FormMethod.Get))
        {
            <label class="fieldpair">By Item #:</label>
            @Html.TextBox("itemNumber")
            
            <h5 style="margin-bottom: 0px;">Or...</h5>
            
            <label class="fieldpair">By Series:</label>
            @Html.TextBox("series")

             <h5 style="margin-bottom: 0px;">Or...</h5>
            
            <label class="fieldpair">By Description:</label>
            @Html.TextBox("description")
            
            <p class="small-buttons" style="margin-bottom: 0px;">
                <input type="submit" value="Search" />
            </p>
        }
    </div>

    <div class="section-left">
                
        <h3 class="sidebar">
            Narrow your search
        </h3>
        <p>Use the filters below to narrow the products list.</p>

        @Html.ActionLink("Clear Filters", "index", "products", null, null)
        
            <h3 class="sidebar">Product Groups</h3>
            <ul class="sidebar">
                @if (ViewBag.Groups != null)
                {
                    foreach (IGrouping<string, ProductGroup> grouping in ViewBag.Groups)
                    {
                        <li class="liClass">@Html.ActionLink(@grouping.Key, "index", "products", new
                                       {
                                           group = grouping.Key,
                                           category = filters.ContainsKey("Category") ? filters["Category"] : "",
                                           type = filters.ContainsKey("Type") ? filters["Type"] : "",
                                           color = filters.ContainsKey("Color") ? filters["Color"] : "",
                                           size = filters.ContainsKey("Size") ? filters["Size"] : "",
                                           finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                                           series = filters.ContainsKey("Series") ? filters["Series"] : "",
                                           itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                                           description = filters.ContainsKey("Description") ? filters["Description"] : "",
                                       }, null) [@grouping.Count()]</li>
                    }
                }
            </ul>
        
            <h3 class="sidebar">Product Categories</h3>
            <ul class="sidebar">
                @if (ViewBag.Categories != null)
                {

                    foreach (IGrouping<string, ProductCategory> grouping in ViewBag.Categories)
                    {
                        <li class="liClass">
                            @Html.ActionLink(@grouping.Key, "index", "products", new
                       {
                           category = grouping.Key,
                           group = filters.ContainsKey("Group") ? filters["Group"] : "",
                           type = filters.ContainsKey("Type") ? filters["Type"] : "",
                           color = filters.ContainsKey("Color") ? filters["Color"] : "",
                           size = filters.ContainsKey("Size") ? filters["Size"] : "",
                           finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                           series = filters.ContainsKey("Series") ? filters["Series"] : "",
                           itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                           description = filters.ContainsKey("Description") ? filters["Description"] : "",
                       }, null) [@grouping.Count()]</li>
                    }
                }
            </ul>
        
            <h3 class="sidebar">Product Types</h3>
            <ul class="sidebar">
                @if (ViewBag.Types != null)
                {
                    foreach (IGrouping<string, ProductType> grouping in ViewBag.Types)
                    {
                        <li class="liClass">
                            @Html.ActionLink(@grouping.Key, "index", "products", new
                       {
                           type = grouping.Key,
                           category = filters.ContainsKey("Category") ? filters["Category"] : "",
                           group = filters.ContainsKey("Group") ? filters["Group"] : "",
                           color = filters.ContainsKey("Color") ? filters["Color"] : "",
                           size = filters.ContainsKey("Size") ? filters["Size"] : "",
                           finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                           series = filters.ContainsKey("Series") ? filters["Series"] : "",
                           itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                           description = filters.ContainsKey("Description") ? filters["Description"] : "",
                       }, null) [@grouping.Count()]</li>
                    }
                }
            </ul>
        
            <h3 class="sidebar">Product Colors</h3>
            <ul class="sidebar">
            @if (ViewBag.Colors != null)
            {
                foreach (IGrouping<string, ProductColor> grouping in ViewBag.Colors)
                {
                        <li class="liClass">
                           @Html.ActionLink(@grouping.Key, "index", "products", new
                      {
                          color = grouping.Key,
                          category = filters.ContainsKey("Category") ? filters["Category"] : "",
                          type = filters.ContainsKey("Type") ? filters["Type"] : "",
                          group = filters.ContainsKey("Group") ? filters["Group"] : "",
                          size = filters.ContainsKey("Size") ? filters["Size"] : "",
                          finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                          series = filters.ContainsKey("Series") ? filters["Series"] : "",
                          itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                          description = filters.ContainsKey("Description") ? filters["Description"] : "",
                      }, null) [@grouping.Count()]</li>
                }
            }
            </ul>

            <h3 class="sidebar">Product Sizes</h3>
            <ul class="sidebar">
            @if (ViewBag.Sizes != null)
            {
                foreach (IGrouping<string, ProductSize> grouping in ViewBag.Sizes)
                {
                    <li class="liClass">
                        @Html.ActionLink(@grouping.Key, "index", "products", new
                   {
                       size = grouping.Key,
                       category = filters.ContainsKey("Category") ? filters["Category"] : "",
                       type = filters.ContainsKey("Type") ? filters["Type"] : "",
                       color = filters.ContainsKey("Color") ? filters["Color"] : "",
                       group = filters.ContainsKey("Group") ? filters["Group"] : "",
                       finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                       series = filters.ContainsKey("Series") ? filters["Series"] : "",
                       itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                       description = filters.ContainsKey("Description") ? filters["Description"] : "",
                   }, null) [@grouping.Count()]</li>
                }
            }
            </ul>

            <h3 class="sidebar">Product Finishes</h3>
            <ul class="sidebar">
            @if (ViewBag.Finishes != null)
            {
                foreach (IGrouping<string, ProductFinish> grouping in ViewBag.Finishes)
                {
                    <li class="liClass">
                        @Html.ActionLink(@grouping.Key, "index", "products", new
                   {
                       finish = grouping.Key,
                       category = filters.ContainsKey("Category") ? filters["Category"] : "",
                       type = filters.ContainsKey("Type") ? filters["Type"] : "",
                       color = filters.ContainsKey("Color") ? filters["Color"] : "",
                       size = filters.ContainsKey("Size") ? filters["Size"] : "",
                       group = filters.ContainsKey("Group") ? filters["Group"] : "",
                       series = filters.ContainsKey("Series") ? filters["Series"] : "",
                       itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                       description = filters.ContainsKey("Description") ? filters["Description"] : "",
                   }, null) [@grouping.Count()]</li>
                }
            }
            </ul>
        
    </div>
</div>

<div class="span-18 last">
    <div class="padded-content">
        <h1>Products</h1>

        <p><em style="font-weight:bold;">Click on a product image or item number to view product details.</em></p>
        
        @if (Model.Any())
        {
            int cellCount = 0;
            var plural = Model.TotalItemCount > 1 ? "product" : "products";
            var message = String.Format("Showing {0} - {1} " + plural + " of {2} matching " + plural + ".", Model.FirstItemOnPage, Model.LastItemOnPage, Model.TotalItemCount);
            
            <p class="alt" style="margin-bottom: 10px;">@message</p>
            
            <table style="width: auto;" border="1" cellpadding="5" cellspacing="5">
                <tr>
                    @foreach (var prod in Model.OrderBy(x => x.ItemNumber))
                    {
                        <td style="width: 150px;"valign="top">

                            <table style="padding: 0; margin: 0;" cellpadding="0" cellspacing="1">
                                <tr>
                                    <td style="height: 160px;padding: 0; margin: 0;">
                                        <div style="width: 150px; margin: 0 auto;" class="product-img-container">
                                            <a href="@Url.Action("show", "products", new { id = prod.Id })" title="tooltip-@prod.Id" class="product-img-link">@Html.GetProductImage(prod, ImageSize.Small)</a>
                                        </div>
                                        <div id="tooltip-@prod.Id" class="tooltip" style="display:none;">
                                                <label>Item Number:</label> @prod.ItemNumber<br />
                                                <label>Description:</label> @prod.Description<br />
                                                @if (prod.Variation != null)
                                                {
                                                    <label>Variance:</label> @prod.Variation.Name<br />
                                                }
                                                @if (!String.IsNullOrWhiteSpace(prod.SizeDescription))
                                                {
                                                    <label>Size:</label> @prod.SizeDescription<br />
                                                }
                                                @if (prod.UnitOfMeasure != null)
                                                {
                                                    <label>Unit of Measure:</label> @prod.UnitOfMeasure.Name<br />
                                                }
                                                @if (prod.UnitsPerPiece > 0)
                                                {
                                                    <label>Units per Piece:</label> @prod.UnitsPerPiece<br />
                                                }
                                                @if (prod.CartonQuantity > 0)
                                                {
                                                    <label>Quantity per Carton:</label> @prod.CartonQuantity<br />
                                                }
                                                @if (prod.Usage != null)
                                                { 
                                                    <label>Use:</label> @prod.Usage.Name<br />
                                                }
                                                @if (isPricingEnabled && currentUser != null && (Roles.IsUserInRole(CAPCO.Infrastructure.Domain.UserRoles.ServiceProviders.ToString()) && currentUser.DiscountCode != null))
                                                {
                                                    if (currentUser.PricePreference == CAPCO.Infrastructure.Domain.PricePreferences.CostOnly.ToString())
                                                    {
                                                        <div><label class="product-details">Cost: </label>@String.Format("{0:c}", prod.ProviderCost(currentUser))</div>
                                                    }
                                                    else if (currentUser.PricePreference == CAPCO.Infrastructure.Domain.PricePreferences.Both.ToString())
                                                    {
                                                        <div><label class="product-details">Retail: </label>@String.Format("{0:c}", prod.ProviderRetail(currentUser))</div>
                                                        <div><label class="product-details">Cost: </label>@String.Format("{0:c}", prod.ProviderCost(currentUser))</div>
                                                    }
                                                    else if (currentUser.PricePreference == CAPCO.Infrastructure.Domain.PricePreferences.RetailOnly.ToString())
                                                    {
                                                        <div><label class="product-details">Retail: </label>@String.Format("{0:c}", prod.ProviderRetail(currentUser))</div>
                                                    }
                                                }
                                            </div>   
                                    </td>
                                </tr>
                                <tr>
                                    <td>
                                        <div class="product-details-grid">
                                            <label>Item #:</label> @Html.ActionLink(prod.ItemNumber, "show", "products", new { id = prod.Id }, null)
                                        </div>
                                    </td>
                                </tr>
                            </table>

                            
                        </td>
                                                {
                                                    cellCount++;
                                                }
                                                if (cellCount % 4 == 0)
                                                {
                            @:</tr><tr>
                        }
                    }

                </tr>
                
            </table>
            <div class="pagedListPager span-17 last" style="padding-bottom: 10px;">
                @Html.PagedListPager(Model,
                    page => Url.Action("Index", new
                    {
                        page,
                        finish = filters.ContainsKey("Finish") ? filters["Finish"] : "",
                        category = filters.ContainsKey("Category") ? filters["Category"] : "",
                        type = filters.ContainsKey("Type") ? filters["Type"] : "",
                        color = filters.ContainsKey("Color") ? filters["Color"] : "",
                        size = filters.ContainsKey("Size") ? filters["Size"] : "",
                        group = filters.ContainsKey("Group") ? filters["Group"] : "",
                        series = filters.ContainsKey("Series") ? filters["Series"] : "",
                        itemNumber = filters.ContainsKey("Item Number") ? filters["Item Number"] : "",
                        description = filters.ContainsKey("Description") ? filters["Description"] : ""
                    }),
                    PagedListRenderOptions.OnlyShowFivePagesAtATime)
            </div>
        }
        else
        { 
            <div>Sorry, but there aren't any products to display. Try using the quick search or modifying your filters using the options to the left.</div>
        }
    </div>
</div>

@section Scripts
{
    <script src="@Url.Content("~/Public/Javascript/Plugins/qtip/jquery.qtip.min.js")"></script>
    <link href="@Url.Content("~/Public/Javascript/Plugins/qtip/jquery.qtip.min.css")" type="text/css" rel="stylesheet" />
    <script type="text/javascript">

        $(".product-img-link").qtip({
            position: {
                my: 'bottom center',  // Position my top left...
                at: 'top center'
            },
            content: {
                text: function(api) {
                    var tid = '#' + $(this).attr('title');
                    return $(tid).html();
                }
            }
        });

//        function getTooltip(e)
//        {
//            return $(e).parent().children('.tooltip').html();
//        }
    </script>
}