@model CAPCO.Infrastructure.Domain.Product

@* This partial view defines form fields that will appear when creating and editing entities *@

<div class="editor-label">
    @Html.LabelFor(model => model.Name)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Name)
    @Html.ValidationMessageFor(model => model.Name)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.ItemNumber)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.ItemNumber)
    @Html.ValidationMessageFor(model => model.ItemNumber)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.PriceCodeGroup)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.PriceCodeGroup)
    @Html.ValidationMessageFor(model => model.PriceCodeGroup)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Series)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.Series)
    @Html.ValidationMessageFor(model => model.Series)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.MadeIn)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.MadeIn)
    @Html.ValidationMessageFor(model => model.MadeIn)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.CartonQuantity)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.CartonQuantity)
    @Html.ValidationMessageFor(model => model.CartonQuantity)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.CoefficientOfFrictionWet)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.CoefficientOfFrictionWet)
    @Html.ValidationMessageFor(model => model.CoefficientOfFrictionWet)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.CoefficientOfFrictionDry)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.CoefficientOfFrictionDry)
    @Html.ValidationMessageFor(model => model.CoefficientOfFrictionDry)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.BreakingStrength)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.BreakingStrength)
    @Html.ValidationMessageFor(model => model.BreakingStrength)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.WaterAbsorption)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.WaterAbsorption)
    @Html.ValidationMessageFor(model => model.WaterAbsorption)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.IsChemicalResistant)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.IsChemicalResistant)
    @Html.ValidationMessageFor(model => model.IsChemicalResistant)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.IsFrostResistant)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.IsFrostResistant)
    @Html.ValidationMessageFor(model => model.IsFrostResistant)
</div>


<div class="editor-label">
    @Html.LabelFor(model => model.ScratchHardiness)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.ScratchHardiness)
    @Html.ValidationMessageFor(model => model.ScratchHardiness)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.UnitsPerPiece)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.UnitsPerPiece)
    @Html.ValidationMessageFor(model => model.UnitsPerPiece)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.SizeDescription)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.SizeDescription)
    @Html.ValidationMessageFor(model => model.SizeDescription)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Manufacturer)
</div>
<div class="editor-field">
    
    @Html.DropDownList("SelectedManufacturer", ((IEnumerable<CAPCO.Infrastructure.Domain.Manufacturer>)ViewBag.PossibleManufacturers).OrderBy(x => x.Section).Select(option => new SelectListItem
    {
        Text = (option == null ? "None" : option.Section), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Manufacturer != null && option.Id == Model.Manufacturer.Id)
    }), "Choose...")
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.ManufacturerColor)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.ManufacturerColor)
    @Html.ValidationMessageFor(model => model.ManufacturerColor)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Usage)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedUsage", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductUsage>)ViewBag.PossibleUsages).OrderBy(x => x.Name).Select(option => new SelectListItem
    {
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Usage != null) && (option.Id == Model.Usage.Id)
    }), "Choose...")
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.UnitOfMeasure)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedUoM", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductUnitOfMeasure>)ViewBag.PossibleProductUoMs).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.UnitOfMeasure != null) && (option.Id == Model.UnitOfMeasure.Id)
    }), "Choose...")
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Status)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedStatus", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductStatus>)ViewBag.PossibleProductStatuses).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Status != null) && (option.Id == Model.Status.Id)
    }), "Choose...")
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Variation)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedVariation", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductVariation>)ViewBag.PossibleProductVariations).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Variation != null) && (option.Id == Model.Variation.Id)
    }), "Choose...")
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.RetailPrice)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.RetailPrice)
    @Html.ValidationMessageFor(model => model.RetailPrice)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Group)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedGroup", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductGroup>)ViewBag.PossibleProductGroups).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Group != null) && (option.Id == Model.Group.Id)
    }), "Choose...")
    @Html.ValidationMessageFor(model => model.Group.Id)
</div>
<div class="editor-label">
    @Html.LabelFor(model => model.Category)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedCategory", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductCategory>)ViewBag.PossibleProductCategories).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Category != null) && (option.Id == Model.Category.Id)
    }), "Choose...")
    @Html.ValidationMessageFor(model => model.Category.Id)
</div>
<div class="editor-label">
    @Html.LabelFor(model => model.Type)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedType", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductType>)ViewBag.PossibleProductTypes).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Type != null) && (option.Id == Model.Type.Id)
    }), "Choose...")
    @Html.ValidationMessageFor(model => model.Type.Id)
</div>
<div class="editor-label">
    @Html.LabelFor(model => model.Color)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedColor", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductColor>)ViewBag.PossibleProductColors).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Color != null) && (option.Id == Model.Color.Id)
    }), "Choose...")
    @Html.ValidationMessageFor(model => model.Color.Id)
</div>
<div class="editor-label">
    @Html.LabelFor(model => model.Size)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedSize", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductSize>)ViewBag.PossibleProductSizes).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Size != null) && (option.Id == Model.Size.Id)
    }), "Choose...")
    @Html.ValidationMessageFor(model => model.Size.Id)
</div>
<div class="editor-label">
    @Html.LabelFor(model => model.Finish)
</div>
<div class="editor-field">
    @Html.DropDownList("SelectedFinish", ((IEnumerable<CAPCO.Infrastructure.Domain.ProductFinish>)ViewBag.PossibleProductFinishes).OrderBy(x => x.Name).Select(option => new SelectListItem
{
        Text = (option == null ? "None" : option.Name), 
        Value = option.Id.ToString(),
        Selected = (Model != null && Model.Finish != null) && (option.Id == Model.Finish.Id)
    }), "Choose...")
    @*@Html.ValidationMessageFor(model => model.Finish.Id)*@
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.YouTubeUrl)
</div>
<div class="editor-field">
    @Html.EditorFor(model => model.YouTubeUrl)
    @Html.ValidationMessageFor(model => model.YouTubeUrl)
</div>

<div class="editor-label">
    @Html.LabelFor(model => model.Description)
</div>
<div class="editor-field">
    @Html.TextBoxFor(model => model.Description)
    @Html.ValidationMessageFor(model => model.Description)
</div>